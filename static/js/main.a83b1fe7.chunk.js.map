{"version":3,"sources":["drawables/Edge.ts","drawables/utils/colorFadeGenerator.ts","drawables/Vertex.ts","contexts/vertices.tsx","utils/feedGraph.ts","components/CanvasMenu/CreateEditForm/styles.tsx","components/CanvasMenu/CreateEditForm/index.tsx","components/CanvasMenu/index.tsx","contexts/canvas.tsx","hooks/useCanvas.tsx","components/Canvas/index.tsx","components/Sidebar/EdgeListItem/index.tsx","components/Sidebar/styles.ts","utils/algorithms/expand.ts","utils/algorithms/depthFirstSearch.ts","utils/algorithms/breadthFirstSearch.ts","utils/algorithms/PriorityQueue.ts","utils/algorithms/bestFirstSearch.ts","components/Sidebar/index.tsx","utils/restoreGraph.ts","pages/Main/styles.ts","pages/Main/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["statusColors","getColorFadeGenerator","from","to","steps","colorRegex","finalColor","match","initialColor","shift","forEach","c","index","arr","parseInt","String","stepSizes","map","value","Math","floor","Number","x","color","self","minMax","min","max","reduce","acc","curr","toString","padStart","Edge","source","destination","cost","lineWidth","font","textAlign","costColor","colorGenerator","changingColor","this","vertexStatus","DEFAULT","setColorGenerator","EXPANDED","SOLUTION","ctx","arrowLength","angle","atan","abs","y","deltaY","Vertex","radius","sin","deltaX","cos","save","beginPath","nextColor","next","strokeStyle","middleX","middleY","moveTo","lineTo","stroke","PI","showCost","fillStyle","fillText","restore","animationSteps","stepMili","setStatus","adjacents","dragging","selected","pathCost","edgeToGet","vertex","splice","findIndex","edge","find","push","arc","fill","borderColorDragging","borderWidth","borderColorSelected","showBorder","borderColor","textColor","shadowColor","shadowBlur","shadowOffsetY","vertexVisitingTextColor","VerticesContext","createContext","fGraph","vertices","connect","feedGraph","VerticesProvider","children","useState","selectedVertex","setSelectedVertex","currentValue","setCurrentValue","setVertices","currentX","setCurrentX","currentY","setCurrentY","enqueueSnackbar","useSnackbar","selectVertex","vertice","hasVertex","some","useEffect","Provider","createVertex","variant","newVertex","getNotConnectedVertices","connectedWith","filter","includes","disconnectVertex","disconnect","deleteVertex","indexOf","length","editVertex","deleteGraph","randomCosts","ceil","random","f","Container","styled","div","ButtonsContainer","CreateEditForm","setShowSelf","useContext","invalidValue","setInvalidValue","TextField","id","label","error","onChange","e","target","helperText","Button","onClick","trim","CanvasMenu","left","top","setShouldOpen","openForm","setOpenForm","handleDeleteVertex","Popover","anchorReference","anchorPosition","anchorOrigin","vertical","horizontal","transformOrigin","open","MenuList","MenuItem","ListItemIcon","CanvasContext","CanvasProvider","canvasRef","useRef","window","innerWidth","canvasWidth","setCanvasWidth","innerHeight","canvasHeight","setCanvasHeight","setCtx","canvasElement","current","hasOwnProperty","getContext","useCanvas","shouldOpenRightClickMenu","setShouldOpenRightClickMenu","render","useCallback","fillRect","draw","requestAnimationFrame","Canvas","draggingVertex","setDraggingVertex","addEventListener","preventDefault","ref","width","height","onContextMenu","onMouseMove","pageX","pageY","onMouseDown","onMouseUp","button","undefined","EdgeListItem","forceRender","setCost","style","display","justifyContent","alignItems","title","fontSize","slice","type","size","IconButton","aside","MenuContainer","ButtonContainer","expand","node","depthFirstSearch","goal","Promise","resolve","a","frontier","reached","Set","add","child","has","unshift","setTimeout","breadthFirstSearch","console","log","solutionNode","PriorityQueue","fn","data","i","right","toChange","swap","heapify","Error","pop","item","parent","j","temp","lowestPathCost","bestFirstSearch","useStyles","makeStyles","root","margin","Sidebar","setOpen","connectEdgeCost","setConnectEdgeCost","selectVertexIndex","setSelectedVertexIndex","openSelectConnectWithVertex","setOpenSelectConnectWithVertex","selectConnectWithVertexIndex","setSelectConnectWithVertexIndex","setShowCost","vertexColor","setVertexColor","navRef","navContRef","buttonRef","setStepMili","classes","toggleOpenSelectConnectWithVertex","idx","className","Typography","Accordion","AccordionSummary","expandIcon","AccordionDetails","InputLabel","Select","labelId","name","onOpen","onClose","List","ListItem","padding","ListItemText","primary","restoreGraph","FormControlLabel","control","Switch","checked","Slider","defaultValue","valueLabelDisplay","step","marks","classList","toggle","main","Main","maxSnack","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a83b1fe7.chunk.js","sourcesContent":["import Drawable from \"./Drawable\"\nimport Vertex, { vertexStatus } from \"./Vertex\"\nimport getColorFadeGenerator from './utils/colorFadeGenerator'\n\nexport enum statusColors {\n    DEFAULT = '#000000',\n    EXPANDED = '#e81a51',\n    SOLUTION = '#a8eb17'\n}\n\nclass Edge implements Drawable {\n    static showCost: boolean = true\n\n    source: Vertex\n    destination: Vertex\n    cost: number\n    lineWidth: number\n    font: string\n    textAlign: CanvasTextAlign\n    costColor: string\n    color: string\n    colorGenerator: Generator | null\n    changingColor: boolean\n\n    constructor(source: Vertex, destination: Vertex, cost = 0) {\n      this.source = source\n      this.destination = destination\n      this.cost = cost\n      this.lineWidth = 3\n      this.font = 'bold 16px Arial'\n      this.textAlign = 'center'\n      this.costColor = '#fff'\n      this.color = '#000000'\n      this.colorGenerator = null\n      this.changingColor = false\n    }\n\n    setStatus(value: vertexStatus) {\n        switch(value) {\n          case vertexStatus.DEFAULT:\n            this.setColorGenerator(statusColors.DEFAULT)\n            break\n          case vertexStatus.EXPANDED:\n            this.setColorGenerator(statusColors.EXPANDED)\n            break\n          case vertexStatus.SOLUTION:\n            this.setColorGenerator(statusColors.SOLUTION)\n            break\n        }\n\n        this.changingColor = true\n      }\n\n\n    draw(ctx: CanvasRenderingContext2D) {\n        const arrowLength = 15\n        const angle = Math.atan(\n            Math.abs(this.source.y - this.destination.y)\n            / Math.abs(this.source.x - this.destination.x))\n\n        const deltaY = Vertex.radius * Math.sin(angle)\n        const deltaX = Vertex.radius * Math.cos(angle)\n\n        const from = { x: this.source.x, y: this.source.y }\n        const to = { x: this.destination.x, y: this.destination.y }\n\n        ctx.save()\n        ctx.beginPath()\n\n        if(this.changingColor && this.colorGenerator) {\n            const nextColor = this.colorGenerator.next().value\n            if(nextColor)\n                this.color = nextColor\n            else\n                this.changingColor = false\n        }\n\n        ctx.strokeStyle = this.color\n        if (from.x < to.x) {\n          from.x += deltaX\n          to.x -= deltaX\n        } else {\n          from.x -= deltaX\n          to.x += deltaX\n        }\n        if (from.y < to.y) {\n          from.y += deltaY\n          to.y -= deltaY\n        } else {\n          from.y -= deltaY\n          to.y += deltaY\n        }\n\n\n        const middleX = Math.min(this.source.x, this.destination.x)\n            + Math.abs(this.source.x - this.destination.x) / 2\n        const middleY = Math.min(this.source.y, this.destination.y)\n            + Math.abs(this.source.y - this.destination.y) / 2\n        /*\n        let radiusX = 0\n        let radiusY = 0\n        if (from.x > to.x && from.y > to.y) {\n            radiusX = middleX + (middleX / 25) * Math.cos(angle - Math.PI / 2)\n            radiusY = middleY + (middleX / 25) * Math.sin(angle - Math.PI / 2)\n          } else if (from.x < to.x && from.y > to.y) {\n            radiusX = middleX - (middleX / 25) * Math.cos(angle + Math.PI / 2)\n            radiusY = middleY + (middleX / 25) * Math.sin(angle + Math.PI / 2)\n          } else if (from.x > to.x && from.y < to.y) {\n            radiusX = middleX + (middleX / 25) * Math.cos(angle + Math.PI / 2)\n            radiusY = middleY - (middleX / 25) * Math.sin(angle + Math.PI / 2)\n          } else {\n            radiusX = middleX - (middleX / 25) * Math.cos(angle - Math.PI / 2)\n            radiusY = middleY - (middleX / 25) * Math.sin(angle - Math.PI / 2)\n          }\n\n        ctx.moveTo(from.x, from.y)\n        ctx.quadraticCurveTo(radiusX, radiusY, to.x, to.y)\n        ctx.stroke()\n        //*/\n\n        ctx.moveTo(from.x, from.y)\n        ctx.lineTo(to.x, to.y)\n        ctx.stroke()\n        ctx.lineWidth = this.lineWidth\n        if (from.x > to.x && from.y > to.y) {\n          ctx.lineTo(to.x + arrowLength * Math.cos(angle - Math.PI / 6),\n                     to.y + arrowLength * Math.sin(angle - Math.PI / 6))\n          ctx.moveTo(to.x, to.y)\n          ctx.lineTo(to.x + arrowLength * Math.cos(angle + Math.PI / 6),\n                     to.y + arrowLength * Math.sin(angle + Math.PI / 6))\n        } else if (from.x < to.x && from.y > to.y) {\n          ctx.lineTo(to.x - arrowLength * Math.cos(angle - Math.PI / 6),\n                     to.y + arrowLength * Math.sin(angle - Math.PI / 6))\n          ctx.moveTo(to.x, to.y)\n          ctx.lineTo(to.x - arrowLength * Math.cos(angle + Math.PI / 6),\n                     to.y + arrowLength * Math.sin(angle + Math.PI / 6))\n        } else if (from.x > to.x && from.y < to.y) {\n          ctx.lineTo(to.x + arrowLength * Math.cos(angle - Math.PI / 6),\n                     to.y - arrowLength * Math.sin(angle - Math.PI / 6))\n          ctx.moveTo(to.x, to.y)\n          ctx.lineTo(to.x + arrowLength * Math.cos(angle + Math.PI / 6),\n                     to.y - arrowLength * Math.sin(angle + Math.PI / 6))\n        } else {\n          ctx.lineTo(to.x - arrowLength * Math.cos(angle - Math.PI / 6),\n                     to.y - arrowLength * Math.sin(angle - Math.PI / 6))\n          ctx.moveTo(to.x, to.y)\n          ctx.lineTo(to.x - arrowLength * Math.cos(angle + Math.PI / 6),\n                     to.y - arrowLength * Math.sin(angle + Math.PI / 6))\n        }\n        ctx.stroke()\n\n        if(Edge.showCost) {\n          ctx.font = this.font\n          ctx.fillStyle = this.costColor\n          ctx.textAlign = this.textAlign\n          ctx.fillText(String(this.cost), middleX, middleY)\n        }\n\n        ctx.restore()\n    }\n\n    setColorGenerator(color: statusColors) {\n        const MILI_TO_SECOND = 1000\n        const animationSteps = Math.floor(30 * Vertex.stepMili / MILI_TO_SECOND)\n        this.colorGenerator = getColorFadeGenerator(this.color,\n                                                      color,\n                                                      animationSteps)\n    }\n\n    restore() {\n        this.setStatus(vertexStatus.DEFAULT)\n    }\n  }\n\n  export default Edge\n","export default function* getColorFadeGenerator(from: string, to: string, steps: number) {\n    const colorRegex = /^#?([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})$/i\n    const finalColor: Array<string | number>| null = to.match(colorRegex)\n    const initialColor: Array<string | number> | null = from.match(colorRegex)\n\n    if(finalColor?.shift() && initialColor?.shift()) {\n        finalColor.forEach((c, index, arr) => arr[index] = parseInt(String(c), 16))\n        initialColor.forEach((c, index, arr) => arr[index] = parseInt(String(c), 16))\n\n        const stepSizes = finalColor.map((value, index) =>\n            Math.floor((Number(value) - Number(initialColor[index]))/steps))\n\n        for(let x = 0; x < steps; x++) {\n            initialColor.forEach((color, index, self) => {\n                const minMax = stepSizes[index] > 0 ? Math.min : Math.max;\n                self[index] = minMax(Number(color) + stepSizes[index], Number(finalColor[index]))\n            })\n\n            yield String(initialColor.reduce((acc, curr) =>\n                acc += curr.toString(16).padStart(2, '0'), '#'))\n        }\n    }\n\n    yield to\n}\n","import Drawable from \"./Drawable\"\nimport Edge from \"./Edge\"\nimport getColorFadeGenerator from './utils/colorFadeGenerator'\n\nexport enum statusColors {\n    DEFAULT = '#333333',\n    EXPANDED = '#e81a51',\n    SOLUTION = '#a8eb17'\n}\n\nexport enum vertexStatus {\n  DEFAULT,\n  EXPANDED,\n  SOLUTION\n}\n\nclass Vertex implements Drawable {\n    static textAlign: CanvasTextAlign = 'center'\n    static textColor: string = '#fff'\n    static font: string = 'bold 16px Arial'\n    static radius: number = 25\n    static borderWidth: number = 3\n    static borderColorSelected: string = '#b3dfea'\n    static borderColorDragging: string = '#fff'\n    static vertexVisitingTextColor: string = '#fff'\n    static showBorder: boolean = true\n    static borderColor: string = '#111'\n    static stepMili: number = 300\n\n    x: number\n    y: number\n    value: string\n    adjacents: Edge[]\n    dragging: boolean\n    selected: boolean\n    color: string\n    pathCost: number\n    changingColor: boolean\n    colorGenerator: Generator | null\n    edgeToGet: Edge | null\n\n\n  constructor(x: number, y: number, value: string) {\n    this.x = x\n    this.y = y\n    this.value = value\n    this.adjacents = []\n    this.dragging = false\n    this.selected = false\n    this.color = statusColors.DEFAULT\n    this.pathCost = 0\n    this.changingColor = false\n    this.colorGenerator = null\n    this.edgeToGet = null\n  }\n\n  setStatus(value: vertexStatus) {\n    switch(value) {\n      case vertexStatus.DEFAULT:\n        this.setColorGenerator(statusColors.DEFAULT)\n        break\n      case vertexStatus.EXPANDED:\n        this.setColorGenerator(statusColors.EXPANDED)\n        break\n      case vertexStatus.SOLUTION:\n        this.setColorGenerator(statusColors.SOLUTION)\n        break\n    }\n\n    this.changingColor = true\n  }\n\n  disconnect(vertex: Vertex) {\n    this.adjacents.splice(\n        this.adjacents.findIndex(edge => edge.destination === vertex), 1)\n  }\n\n  connect(vertex: Vertex, cost: number = 0) {\n    if(this.adjacents.find(edge => edge.destination === vertex))\n        return\n    this.adjacents.push(new Edge(this, vertex, cost))\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.save()\n    ctx.beginPath()\n    ctx.arc(this.x, this.y, Vertex.radius, 0, 2 * Math.PI, false)\n\n    if(this.changingColor && this.colorGenerator) {\n        const nextColor = this.colorGenerator.next().value\n        if(nextColor)\n            this.color = nextColor\n        else\n            this.changingColor = false\n    }\n\n    ctx.fillStyle = this.color\n    ctx.fill()\n\n    if (this.dragging) {\n        ctx.strokeStyle = Vertex.borderColorDragging\n        ctx.lineWidth = Vertex.borderWidth\n        ctx.stroke()\n\n    } else if (this.selected) {\n        ctx.lineWidth = Vertex.borderWidth\n        ctx.strokeStyle = Vertex.borderColorSelected\n        ctx.stroke()\n    } else if(Vertex.showBorder) {\n        ctx.strokeStyle = Vertex.borderColor\n        ctx.lineWidth = Vertex.borderWidth\n        ctx.stroke()\n    }\n\n    ctx.font = Vertex.font\n    ctx.fillStyle = Vertex.textColor\n    ctx.textAlign = Vertex.textAlign\n    ctx.shadowColor = '#000'\n    ctx.shadowBlur = 3\n    ctx.shadowOffsetY = 1\n    ctx.fillText(this.value, this.x, this.y + 5)\n    ctx.restore()\n  }\n\n  private setColorGenerator(color: statusColors) {\n    const MILI_TO_SECOND = 1000\n    const animationSteps = Math.floor(30 * Vertex.stepMili/MILI_TO_SECOND)\n    this.colorGenerator = getColorFadeGenerator(this.color,\n                                                color,\n                                                animationSteps)\n  }\n\n  restore() {\n      this.setStatus(vertexStatus.DEFAULT)\n      this.pathCost = 0\n      this.edgeToGet = null\n  }\n}\n\nexport default Vertex\n","import React, { createContext, useEffect, useState } from 'react'\nimport { useSnackbar } from 'notistack'\n\nimport Vertex from '../drawables/Vertex'\nimport feedGraph, { feedFullScreenGraph } from '../utils/feedGraph'\n\ninterface VerticesContextProps {\n    vertices: Vertex[]\n    selectedVertex: Vertex | null\n    selectVertex(vertex: Vertex | null): void\n    currentX: number\n    setCurrentX(x: number): void\n    currentY: number\n    setCurrentY(y: number): void\n    currentValue: string\n    setCurrentValue(value: string): void\n    createVertex(): void\n    getNotConnectedVertices(): Vertex[]\n    disconnectVertex(vertex: Vertex): void\n    deleteVertex(): void\n    editVertex(): void\n    deleteGraph(): void\n    randomCosts(): void\n}\n\nconst VerticesContext = createContext({} as VerticesContextProps)\nconst fGraph = feedGraph()\n\nexport const VerticesProvider: React.FC = ({children}) => {\n    const [selectedVertex, setSelectedVertex] = useState<Vertex | null>(null)\n    const [currentValue, setCurrentValue] = useState<string>('')\n    const [vertices, setVertices] = useState<Vertex[]>([])\n    const [currentX, setCurrentX] = useState<number>(0)\n    const [currentY, setCurrentY] = useState<number>(0)\n    const { enqueueSnackbar } = useSnackbar()\n\n\n    const selectVertex = (vertex: Vertex | null) => {\n        vertices.forEach(vertice => {\n            vertice.dragging = vertice.selected = false\n        })\n        setSelectedVertex(vertex)\n        if(vertex)\n            vertex.selected = true\n    }\n\n    const createVertex = () => {\n        if(hasVertex(currentValue)) {\n            enqueueSnackbar('Vertex with this value already exists!',\n                            {variant: 'error'})\n            return null\n        }\n        const newVertex = new Vertex(currentX, currentY, currentValue)\n        vertices.push(newVertex)\n        selectVertex(newVertex)\n        enqueueSnackbar('Vertex created successfully!',\n                        {variant: 'success'})\n        return null\n    }\n\n    const editVertex = () => {\n        if(hasVertex(currentValue)) {\n            enqueueSnackbar('Vertex with this value already exists!',\n                            {variant: 'error'})\n            return\n        }\n        if(selectedVertex) {\n            selectedVertex.value = currentValue\n            enqueueSnackbar('Vertex edited successfully',\n                            {variant: 'success'})\n        }\n    }\n\n    const disconnectVertex = (vertex: Vertex) => {\n        if(selectedVertex) {\n            selectedVertex.disconnect(vertex)\n            enqueueSnackbar('Vertex disconnected succesfully',\n                            {variant: 'success'})\n        }\n    }\n\n    const deleteVertex = () => {\n        if(selectedVertex) {\n            selectedVertex.adjacents.forEach(edge =>\n                selectedVertex.disconnect(edge.destination))\n            vertices.forEach(vertex => {\n                vertex.adjacents.forEach(edge => {\n                    if(edge.destination === selectedVertex)\n                        vertex.disconnect(selectedVertex)})\n            })\n            vertices.splice(vertices.indexOf(selectedVertex), 1)\n            if(vertices.length > 0)\n                selectVertex(vertices[0])\n            else\n                selectVertex(null)\n            enqueueSnackbar('Vertex deleted succesfully',\n                            {variant: 'success'})\n        } else {\n            enqueueSnackbar('No vertex selected',\n                            {variant: 'warning'})\n        }\n    }\n\n    const deleteGraph = () => {\n        vertices.splice(0, vertices.length)\n        selectVertex(null)\n        enqueueSnackbar('Graph deleted succesfully',\n                        {variant: 'success'})\n    }\n\n    const hasVertex = (value: string) => {\n        return vertices.some(vertex => {\n            return vertex.value === value\n        })\n    }\n\n    const getNotConnectedVertices = (): Vertex[] => {\n        if(!selectedVertex)\n            return []\n        const connectedWith = selectedVertex.adjacents.map(edge =>\n                                                            edge.destination)\n        return vertices.filter(vertex => !connectedWith.includes(vertex))\n    }\n\n    const randomCosts = () => {\n        for(const vertex of vertices)\n            for(const edge of vertex.adjacents)\n                edge.cost = Math.ceil(Math.random() * 100)\n    }\n\n    useEffect(() => {\n        setVertices(fGraph)\n    }, [])\n\n\n    return (\n        <VerticesContext.Provider value={{\n                vertices,\n                selectedVertex,\n                selectVertex,\n                currentX,\n                setCurrentX,\n                currentY,\n                setCurrentY,\n                currentValue,\n                setCurrentValue,\n                createVertex,\n                getNotConnectedVertices,\n                disconnectVertex,\n                deleteVertex,\n                editVertex,\n                deleteGraph,\n                randomCosts\n            }}>\n            {children}\n        </VerticesContext.Provider>\n    )\n}\n\nexport default VerticesContext\n","import Vertex from '../drawables/Vertex'\n\nexport default function feedGraph(): Vertex[] {\n    const vertices: Vertex[] = []\n\n    vertices.push(new Vertex(560, 40, '1'))\n    vertices.push(new Vertex(490, 120, '2'))\n    vertices.push(new Vertex(630, 120, '3'))\n    vertices.push(new Vertex(420, 200, '4'))\n    vertices.push(new Vertex(530, 200, '5'))\n    vertices.push(new Vertex(590, 200, '6'))\n    vertices.push(new Vertex(700, 200, '7'))\n    vertices.push(new Vertex(350, 280, '8'))\n    vertices.push(new Vertex(475, 280, '9'))\n    vertices.push(new Vertex(560, 280, '10'))\n    vertices.push(new Vertex(645, 280, '11'))\n    vertices.push(new Vertex(770, 280, '12'))\n    vertices.push(new Vertex(550, 580, '13'))\n    vertices.push(new Vertex(550, 500, '14'))\n    vertices.push(new Vertex(640, 425, '15'))\n    vertices.push(new Vertex(640, 530, '16'))\n    vertices.push(new Vertex(640, 625, '17'))\n    vertices.push(new Vertex(550, 675, '18'))\n    vertices.push(new Vertex(460, 625, '19'))\n    vertices.push(new Vertex(460, 530, '20'))\n    vertices.push(new Vertex(460, 425, '21'))\n    vertices.push(new Vertex(380, 485, '22'))\n    vertices.push(new Vertex(345, 575, '23'))\n    vertices.push(new Vertex(380, 650, '24'))\n    vertices.push(new Vertex(460, 730, '25'))\n    vertices.push(new Vertex(550, 790, '26'))\n    vertices.push(new Vertex(640, 730, '27'))\n    vertices.push(new Vertex(720, 650, '28'))\n    vertices.push(new Vertex(755, 575, '29'))\n    vertices.push(new Vertex(720, 485, '30'))\n\n    vertices[0].connect(vertices[1], 1)\n    vertices[0].connect(vertices[2], 1)\n    vertices[1].connect(vertices[3], 1)\n    vertices[1].connect(vertices[4], 1)\n    vertices[2].connect(vertices[5], 1)\n    vertices[2].connect(vertices[6], 1)\n    vertices[3].connect(vertices[7], 1)\n    vertices[3].connect(vertices[8], 1)\n    vertices[4].connect(vertices[8], 1)\n    vertices[4].connect(vertices[9], 1)\n    vertices[5].connect(vertices[9], 1)\n    vertices[5].connect(vertices[10], 1)\n    vertices[6].connect(vertices[10], 1)\n    vertices[6].connect(vertices[11], 1)\n\n    vertices[12].connect(vertices[13], 1)\n    vertices[12].connect(vertices[15], 1)\n    vertices[12].connect(vertices[16], 1)\n    vertices[12].connect(vertices[17], 1)\n    vertices[12].connect(vertices[18], 1)\n    vertices[12].connect(vertices[19], 1)\n    vertices[13].connect(vertices[20], 1)\n    vertices[13].connect(vertices[14], 1)\n    vertices[14].connect(vertices[29], 1)\n    vertices[15].connect(vertices[29], 1)\n    vertices[15].connect(vertices[28], 1)\n    vertices[16].connect(vertices[27], 1)\n    vertices[16].connect(vertices[26], 1)\n    vertices[17].connect(vertices[25], 1)\n    vertices[18].connect(vertices[24], 1)\n    vertices[18].connect(vertices[23], 1)\n    vertices[19].connect(vertices[22], 1)\n    vertices[19].connect(vertices[21], 1)\n    vertices[21].connect(vertices[20], 1)\n    vertices[22].connect(vertices[21], 1)\n    vertices[23].connect(vertices[22], 1)\n    vertices[22].connect(vertices[23], 1)\n    vertices[23].connect(vertices[24], 1)\n    vertices[24].connect(vertices[25], 1)\n    vertices[25].connect(vertices[26], 1)\n    vertices[26].connect(vertices[27], 1)\n    vertices[27].connect(vertices[28], 1)\n    vertices[28].connect(vertices[29], 1)\n\n    return vertices\n}\n\nexport function feedFullScreenGraph(): Vertex[] {\n    const width = window.innerWidth\n    const height = window.innerHeight\n    const vertices = []\n    const sidebarWidth = 320\n    let numY = 0\n    for(let y = 50, value = 0; y < height - Vertex.radius; y += (Vertex.radius * 4), numY++) {\n        for(let x = sidebarWidth; x < width - Vertex.radius; x += (Vertex.radius * 4), value++) {\n            vertices.push(new Vertex(x, y, String(value)))\n        }\n    }\n\n    const numX = vertices.length / numY\n\n    for(let y = 0; y < numY; y++) {\n        for(let x = 0; x < numX; x++) {\n            // connect with vertex on the right\n            if(x % (numX - 1) !== 0 || x % (numX + 1) === 0)\n                vertices[x + y * numX].connect(vertices[x + y * numX +1])\n\n            // connect with vertex bellow            \n            if(x + y * numX + numX >= vertices.length)\n                continue\n\n            // connect with vertex diagonal\n            if(x % (numX - 1) !== 0 || x % (numX + 1) === 0)\n                vertices[x + y * numX].connect(vertices[x + (y+1) * numX + 1])\n                \n            vertices[x + y * numX].connect(vertices[x + y * numX + numX])\n\n        }\n    }\n\n    return vertices\n}","import styled from 'styled-components'\n\nexport const Container = styled.div`\n    display: flex;\n    flex-direction: column;\n\n    padding: 12px;\n`\n\nexport const ButtonsContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n\n    margin-top: 12px;\n`","import React, { useContext, useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\n\nimport VerticesContext from '../../../contexts/vertices'\nimport { Container, ButtonsContainer } from './styles'\n\ninterface CreateEditFormProps {\n    setShowSelf(b: boolean): void\n}\n\nconst CreateEditForm: React.FC<CreateEditFormProps> = ({ setShowSelf }) => {\n    const { selectedVertex, createVertex, currentValue, setCurrentValue, editVertex} = useContext(VerticesContext)\n    const [invalidValue, setInvalidValue] = useState<boolean>(false)\n\n    const handleCreateEditVertex = () => {\n        if(!currentValue.trim()) {\n            setInvalidValue(true)\n            return\n        }\n\n        if(selectedVertex) {\n            editVertex()\n        }\n        else\n            createVertex()\n        setShowSelf(false)\n    }\n\n    const handleValueInput = (e: any) => {\n        setCurrentValue(e.target.value)\n    }\n\n    return (\n        <Container>\n            <TextField\n                id=\"vertex-label\"\n                label=\"Value\"\n                variant=\"standard\"\n                error={invalidValue}\n                onChange={handleValueInput}\n                helperText={invalidValue && \"Value cannot be empty\"}\n                />\n            <ButtonsContainer>\n                <Button variant=\"contained\" onClick={handleCreateEditVertex}>{ selectedVertex ? 'Save' : 'Create'}</Button>\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => setShowSelf(false)}>Cancel</Button>\n            </ButtonsContainer>\n        </Container>\n    )\n}\n\nexport default CreateEditForm\n","import React, { useContext, useState } from 'react'\nimport MenuList from '@material-ui/core/MenuList'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Popover from '@material-ui/core/Popover'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport EditIcon from '@material-ui/icons/Edit'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport NotInterestedIcon from '@material-ui/icons/NotInterested'\nimport AddIcon from '@material-ui/icons/Add'\n\nimport CreateEditForm from './CreateEditForm'\nimport VerticesContext from '../../contexts/vertices'\n\n\ninterface CanvasMenuProps {\n    left: number\n    top: number\n    setShouldOpen(b: boolean): void\n}\n\nconst CanvasMenu: React.FC<CanvasMenuProps> = ({ left, top, setShouldOpen }) => {\n    const { deleteVertex, selectedVertex } = useContext(VerticesContext)\n    const [openForm, setOpenForm] = useState<boolean>(false)\n\n    const handleDeleteVertex = () => {\n        deleteVertex()\n        setShouldOpen(false)\n    }\n\n    const renderCreate = () => {\n        return (\n            <MenuList>\n                <MenuItem onClick={() => setOpenForm(true)}>\n                        <ListItemIcon>\n                            <AddIcon color=\"primary\" />\n                        </ListItemIcon>\n                            Create\n                </MenuItem>\n                <MenuItem onClick={() => setShouldOpen(false)}>\n                        <ListItemIcon>\n                            <NotInterestedIcon color=\"secondary\" />\n                        </ListItemIcon>\n                            Cancel\n                </MenuItem>\n            </MenuList>\n        )\n    }\n\n    const renderDelete = () => {\n        return (\n            <MenuList>\n                <MenuItem onClick={() => setOpenForm(true)}>\n                        <ListItemIcon>\n                            <EditIcon color=\"primary\" />\n                        </ListItemIcon>\n                            Edit\n                </MenuItem>\n                <MenuItem onClick={handleDeleteVertex}>\n                        <ListItemIcon>\n                            <DeleteIcon color=\"secondary\" />\n                        </ListItemIcon>\n                            Delete\n                </MenuItem>\n                <MenuItem onClick={() => setShouldOpen(false)}>\n                        <ListItemIcon>\n                            <NotInterestedIcon color=\"secondary\" />\n                        </ListItemIcon>\n                            Cancel\n                </MenuItem>\n            </MenuList>\n        )\n    }\n\n    const renderMenu = () => {\n        if(selectedVertex)\n            return renderDelete()\n        return renderCreate()\n    }\n\n    return (\n        <Popover \n            anchorReference=\"anchorPosition\"\n            anchorPosition={{ top, left }}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'left',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'left',\n            }}\n            open={true}\n            >\n                { openForm ? <CreateEditForm setShowSelf={setShouldOpen} /> : renderMenu() }\n        </Popover>\n    )\n}\n\nexport default CanvasMenu","import React, { createContext, useContext, useEffect, useCallback, useState } from 'react'\n\nimport CanvasMenu from '../components/CanvasMenu'\nimport { useCanvas } from '../hooks/useCanvas'\nimport VerticesContext from '../contexts/vertices'\n\ninterface CanvasContextProps {\n    setShouldOpenRightClickMenu(b: boolean): void\n    setCanvasHeight(height: number): void\n    setCanvasWidth(width: number): void\n    canvasHeight: number\n    canvasWidth: number\n    canvasRef: React.RefObject<HTMLCanvasElement>\n    ctx: CanvasRenderingContext2D\n}\n\nconst CanvasContext = createContext({} as CanvasContextProps)\nconst backgroundColor: string = '#1f1e2e'\n\nexport const CanvasProvider: React.FC = ({ children }) => {\n    const { canvasRef, canvasHeight, canvasWidth,\n            ctx, setCanvasHeight, setCanvasWidth } = useCanvas()\n\n    const { vertices, currentX, currentY } = useContext(VerticesContext)\n\n    const [shouldOpenRightClickMenu,\n           setShouldOpenRightClickMenu] = useState<boolean>(false)\n\n    const render = useCallback(() => {\n        if(!ctx.save)\n            return\n\n        ctx.save()\n        ctx.fillStyle = backgroundColor\n        ctx.fillRect(0, 0, canvasWidth, canvasHeight)\n\n        for(const vertex of vertices) {\n            for(const edge of vertex.adjacents) {\n                edge.draw(ctx)\n            }\n        }\n\n        for(const vertex of vertices) {\n            vertex.draw(ctx)\n        }\n\n        ctx.restore()\n        requestAnimationFrame(render)\n    }, [ctx, canvasWidth, canvasHeight, vertices])\n\n    useEffect(() => {\n        requestAnimationFrame(render)\n    }, [render])\n\n    return (\n        <CanvasContext.Provider value={{\n            setShouldOpenRightClickMenu,\n            setCanvasHeight,\n            setCanvasWidth,\n            canvasHeight,\n            canvasWidth,\n            canvasRef,\n            ctx,\n        }}>\n            {children}\n            {shouldOpenRightClickMenu &&\n            <CanvasMenu\n                top={currentY}\n                left={currentX}\n                setShouldOpen={setShouldOpenRightClickMenu} />}\n        </CanvasContext.Provider>\n    )\n}\n\nexport default CanvasContext\n","import { useEffect, useRef, useState} from 'react'\n\nexport function useCanvas() {\n    const canvasRef = useRef<HTMLCanvasElement>(null)\n    const [canvasWidth, setCanvasWidth] = useState<number>(window.innerWidth)\n    const [canvasHeight, setCanvasHeight] = useState<number>(window.innerHeight)\n    const [ctx, setCtx] = useState<CanvasRenderingContext2D>({} as CanvasRenderingContext2D)\n\n    useEffect(() => {\n        const canvasElement: HTMLCanvasElement = canvasRef.current as HTMLCanvasElement\n        if(!ctx.hasOwnProperty('save'))\n            setCtx(canvasElement.getContext('2d') as CanvasRenderingContext2D)\n    }, [ctx])\n\n    return { canvasRef, canvasWidth, canvasHeight, setCanvasHeight, setCanvasWidth, ctx }\n}","import React, { useContext, useState } from 'react'\nimport Vertex from '../../drawables/Vertex'\nimport VerticesContext from '../../contexts/vertices'\nimport CanvasContext from '../../contexts/canvas'\n\nconst Canvas: React.FC = () => {\n    const { setCurrentX, setCurrentY,\n            selectVertex, vertices } = useContext(VerticesContext)\n\n    const [draggingVertex, setDraggingVertex] = useState<Vertex>()\n\n    const { setCanvasHeight, setCanvasWidth,\n            canvasRef, canvasHeight,canvasWidth,\n            setShouldOpenRightClickMenu } = useContext(CanvasContext)\n\n    const handleMoveVertice: React.MouseEventHandler<HTMLCanvasElement> = e => {\n        if (draggingVertex) {\n          draggingVertex.x = e.pageX\n          draggingVertex.y = e.pageY\n        }\n      }\n\n    const handleMouseDown: React.MouseEventHandler<HTMLCanvasElement> = e => {\n        selectVertex(null)\n        const x = e.pageX\n        const y = e.pageY\n        setCurrentX(Number(x))\n        setCurrentY(Number(y))\n\n        vertices.some((vertex: Vertex, index: number) => {\n          if ((x > vertex.x - Vertex.radius && x < vertex.x + Vertex.radius)\n            && (y > vertex.y - Vertex.radius && y < vertex.y + Vertex.radius)) {\n            vertex.dragging = true\n            setDraggingVertex(vertex)\n            return true\n          }\n          return false\n        })\n      }\n\n    const handleMouseUp: React.MouseEventHandler<HTMLCanvasElement> = e => {\n        if (draggingVertex) {\n            selectVertex(draggingVertex)\n        }\n        if(e.button === 2)\n          setShouldOpenRightClickMenu(true)\n        setDraggingVertex(undefined)\n      }\n\n    const handleContextMenu: React.MouseEventHandler<HTMLCanvasElement> = e => {\n        e.preventDefault()\n    }\n\n    window.addEventListener('resize', () => {\n        setCanvasHeight(window.innerHeight)\n        setCanvasWidth(window.innerWidth)\n    })\n\n    window.addEventListener('contextmenu', (e) => e.preventDefault())\n\n    return (\n        <canvas\n            ref={canvasRef}\n            width={canvasWidth}\n            height={canvasHeight}\n            onContextMenu={handleContextMenu}\n            onMouseMove={draggingVertex && handleMoveVertice}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleMouseUp}\n        />\n    )\n}\n\nexport default Canvas\n","import React, { useState, useContext } from 'react'\nimport Delete from '@material-ui/icons/Delete'\nimport ArrowForward from '@material-ui/icons/ArrowForward'\nimport TextField from '@material-ui/core/TextField'\nimport IconButton from '@material-ui/core/IconButton'\n\nimport Edge from '../../../drawables/Edge'\nimport VerticesContext from '../../../contexts/vertices'\n\ninterface EdgeListItemProps {\n    edge: Edge\n    forceRender(o: {}):void\n}\n\nconst EdgeListItem: React.FC<EdgeListItemProps> = ({ edge, forceRender }) => {\n    const [cost, setCost] = useState<number>(edge.cost)\n    const { disconnectVertex } = useContext(VerticesContext)\n\n    const handleDisconnectVertex = () => {\n        disconnectVertex(edge.destination)\n        forceRender({})\n    }\n\n    const handleChangeEdgeCost = (e: any) => {\n        setCost(e.target.value)\n        edge.cost = e.target.value\n    }\n\n    return (\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n            <div style={{ display: 'flex', alignItems: 'center'}}>\n                <ArrowForward />\n                <span title={edge.destination.value} style={{ fontSize: '14px'}}>{edge.destination.value.slice(0, 9)}</span>\n            </div>\n            <div>\n                <TextField type=\"number\" label=\"cost\" size=\"small\" value={cost} style={{ width: '80px'}} onChange={handleChangeEdgeCost} />\n                <IconButton edge=\"end\" onClick={handleDisconnectVertex}>\n                    <Delete />\n                </IconButton>\n            </div>\n        </div>\n    )\n}\n\nexport default EdgeListItem\n","import styled from 'styled-components'\n\nexport const Container = styled.aside`\n    display: flex;\n    height: 100%;\n\n    position: absolute;\n    left: 0;\n\n    margin-left: 0px;\n\n    &.is-closed {\n        left: -270px;\n    }\n\n    transition: all .3s;\n`\n\nexport const MenuContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    overflow-y: scroll;\n    width: 270px;\n    padding-bottom: 20px;\n\n    &::-webkit-scrollbar {\n        background-color: #ffffff;\n        width: 8px;\n    }\n\n    &::-webkit-scrollbar:hover {\n        background-color: #e0e0e0;\n    }\n    \n    &.is-closed, &.is-closed > *, &.is-closed::-webkit-scrollbar {\n        background-color: transparent;\n    }\n\n    background-color: white;\n    transition: all .2s;\n`\n\nexport const ButtonContainer = styled.div`\n    height: 48px;\n    width: 48px;\n    position: relative;\n\n    left: -60px;\n\n    &.is-closed {\n        left: 0px;\n    }\n\n    transition: left .3s;\n`","import Vertex from '../../drawables/Vertex'\nimport Edge from '../../drawables/Edge'\n\nexport default function expand(node: Vertex | undefined): [Vertex, Edge][] {\n    if(node)\n        return node.adjacents.map(edge => {\n            edge.destination.pathCost = node.pathCost + edge.cost\n            if(!edge.destination.edgeToGet)\n                edge.destination.edgeToGet = edge\n            return [edge.destination, edge]\n        })\n    return []\n}\n","import Vertex, { vertexStatus } from '../../drawables/Vertex'\nimport Edge from '../../drawables/Edge'\nimport expand from './expand'\n\nexport default function depthFirstSearch(node: Vertex,\n                                         goal: string = '',\n                                         ): Promise<boolean> {\n    return new Promise(async resolve => {\n        const frontier: [Vertex, Edge | null][] = [[node, null]]\n        const reached = new Set<Vertex>()\n        reached.add(node)\n\n        while(frontier.length) {\n            const [node, edge] = frontier.shift() || []\n            if(node) {\n                node.setStatus(vertexStatus.EXPANDED)\n                if(node.value === goal)\n                    return resolve(true)\n            }\n            if (edge)\n                edge.setStatus(vertexStatus.EXPANDED)\n            expand(node).forEach(([child, edge]) => {\n                if(!reached.has(child)) {\n                    reached.add(child)\n                    frontier.unshift([child, edge])\n                }\n            })\n\n            await new Promise(resolve => setTimeout(resolve, Vertex.stepMili))\n        }\n\n        return resolve(false)\n    })\n}\n","import Vertex, { vertexStatus } from '../../drawables/Vertex'\nimport Edge from '../../drawables/Edge'\nimport expand from './expand'\n\nexport default function breadthFirstSearch(node: Vertex,\n                                           goal: string\n                                           ): Promise<boolean> {\n    return new Promise(async resolve => {\n        console.log(goal)\n        const frontier: [Vertex, Edge | null][] = [[node, null]]\n        const reached = new Set<Vertex>()\n        reached.add(node)\n\n        while(frontier.length) {\n            const [node, edge] = frontier.shift() || []\n            if (edge)\n                edge.setStatus(vertexStatus.EXPANDED)\n            if(node) {\n                node.setStatus(vertexStatus.EXPANDED)\n                if(node.value === goal) {\n                    let solutionNode: Vertex | undefined = node\n                    while(solutionNode) {\n                        solutionNode.setStatus(vertexStatus.SOLUTION)\n                        if(solutionNode.edgeToGet)\n                            solutionNode\n                                .edgeToGet\n                                .setStatus(vertexStatus.SOLUTION)\n                        solutionNode = solutionNode.edgeToGet?.source\n                    }\n                    return resolve(true)\n                }\n            }\n            expand(node).forEach(([child, edge]) => {\n                if(!reached.has(child)) {\n                    reached.add(child)\n                    frontier.push([child, edge])\n                }\n            })\n            await new Promise(resolve => setTimeout(resolve, Vertex.stepMili))\n        }\n\n        return resolve(false)\n    })\n}\n","class PriorityQueue<T> {\n    data: T[]\n    fn: (obj: T) => number\n    type: string\n\n    constructor(fn: (obj: T) => number, type: 'max' | 'min') {\n        this.fn = fn\n        this.data = []\n        this.type = type\n    }\n\n    get length() {\n        return this.data.length\n    }\n\n    parent(i: number): number {\n        return Math.floor((i-1) / 2)\n    }\n\n    right(i: number): number {\n        return (i+1) * 2\n    }\n\n    left(i: number): number {\n        return (i*2) + 1\n    }\n\n    heapify(i: number) {\n        let left = this.left(i)\n        let right = this.right(i)\n        let toChange = i\n\n        if(left < this.data.length) {\n            if((this.type === 'min' && this.fn(this.data[left]) < this.fn(this.data[toChange])) ||\n               (this.type === 'max' && this.fn(this.data[left]) > this.fn(this.data[toChange])))\n                toChange = left\n        }\n        if(right < this.data.length) {\n            if((this.type === 'min' && this.fn(this.data[right]) < this.fn(this.data[toChange])) ||\n               (this.type === 'max' && this.fn(this.data[right]) > this.fn(this.data[toChange])))\n                toChange = right\n        }\n\n        if(toChange !== i) {\n            this.swap(i, toChange)\n            this.heapify(toChange)\n        }\n    }\n\n    pop(): T | undefined {\n        if(this.data.length === 0)\n            throw new Error('Heap Underflow')\n\n        this.swap(0, this.data.length-1)\n        const value = this.data.pop()\n        this.heapify(0)\n        return value\n    }\n\n    push(item: T) {\n        this.data.push(item)\n        let i = this.data.length - 1\n        if(this.type === 'max') {\n            while(i > 0 && this.fn(this.data[this.parent(i)]) < this.fn(this.data[i])) {\n                this.swap(i, this.parent(i))\n                i = this.parent(i)\n            }\n        } else {\n            while(i > 0 && this.fn(this.data[this.parent(i)]) > this.fn(this.data[i])) {\n                this.swap(i, this.parent(i))\n                i = this.parent(i)\n            }\n        }\n    }\n\n    swap(i: number, j: number) {\n        const temp = this.data[i]\n        this.data[i] = this.data[j]\n        this.data[j] = temp\n    }\n}\n\nexport default PriorityQueue\n","import Vertex, { vertexStatus } from '../../drawables/Vertex'\nimport Edge from '../../drawables/Edge'\nimport PriorityQueue from './PriorityQueue'\nimport expand from './expand'\n\nfunction lowestPathCost(item: [Vertex, Edge | null]) {\n    return item[0].pathCost\n}\n\nexport default async function bestFirstSearch(\n        node: Vertex,\n        goal: string = '',\n        fn: (item: [Vertex, Edge | null]) =>\n            number = lowestPathCost): Promise<boolean> {\n\n    return new Promise(async resolve => {\n        const frontier = new PriorityQueue<[Vertex, Edge | null]>(fn, 'min')\n        const reached = new Set<Vertex>()\n        frontier.push([node, null])\n        reached.add(node)\n\n        while(frontier.length) {\n            const [node, edge] = frontier.pop() || []\n            if(node) {\n                node.setStatus(vertexStatus.EXPANDED)\n                if(node.value === goal)\n                    return resolve(true)\n            }\n            if (edge)\n                edge.setStatus(vertexStatus.EXPANDED)\n            expand(node).forEach(([child, edge]) => {\n                if(!reached.has(child)) {\n                    reached.add(child)\n                    frontier.push([child, edge])\n                }\n            })\n            await new Promise(resolve => setTimeout(resolve, Vertex.stepMili))\n        }\n\n        return resolve(false)\n    })\n}\n","import React, { useContext, useRef, useState, useEffect } from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport Menu from '@material-ui/icons/Menu'\nimport Close from '@material-ui/icons/Close'\nimport DeviceHub from '@material-ui/icons/DeviceHub'\nimport Code from '@material-ui/icons/Code'\nimport Button from '@material-ui/core/Button'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport Slider from '@material-ui/core/Slider'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Typography from '@material-ui/core/Typography'\nimport Accordion from '@material-ui/core/Accordion'\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\nimport TextField from '@material-ui/core/TextField'\nimport Switch from '@material-ui/core/Switch'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport ExpandMore from '@material-ui/icons/ExpandMore'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport EdgeListItem from './EdgeListItem'\n\nimport { Container, MenuContainer, ButtonContainer } from './styles'\nimport VerticesContext from '../../contexts/vertices'\nimport Vertex from '../../drawables/Vertex'\nimport Edge from '../../drawables/Edge'\n\nimport depthFirstSearch from '../../utils/algorithms/depthFirstSearch'\nimport breadthFirstSearch from '../../utils/algorithms/breadthFirstSearch'\nimport bestFirstSearch from '../../utils/algorithms/bestFirstSearch'\nimport restoreGraph from '../../utils/restoreGraph'\n\nconst useStyles = makeStyles({\n    root: {\n        textAlign: 'center',\n        margin: '40px',\n    }\n})\n\nconst Sidebar: React.FC = () => {\n    const [open, setOpen] = useState<boolean>(true)\n    const [, forceRender] = useState({})\n    const [connectEdgeCost, setConnectEdgeCost] = useState<number>(0)\n    const [selectVertexIndex, setSelectedVertexIndex] = useState<number>(0)\n    const [openSelectConnectWithVertex, setOpenSelectConnectWithVertex] = useState<boolean>(false)\n    const [selectConnectWithVertexIndex, setSelectConnectWithVertexIndex] = useState<string>('')\n\n    const [showCost, setShowCost] = useState<boolean>(true)\n    const [vertexColor, setVertexColor] = useState<string>('#ffffff')\n\n    const navRef = useRef<HTMLDivElement>(null)\n    const navContRef = useRef<HTMLDivElement>(null)\n    const buttonRef = useRef<HTMLDivElement>(null)\n    const { vertices,\n            selectedVertex,\n            getNotConnectedVertices,\n            deleteGraph,\n            randomCosts } = useContext(VerticesContext)\n\n    const [stepMili, setStepMili] = useState<number>(Vertex.stepMili)\n\n    const classes = useStyles()\n\n    const toggleMenu = () => {\n        setOpen(!open)\n\n        if(navRef.current)\n            navRef.current.classList.toggle('is-closed')\n        if(buttonRef.current)\n            buttonRef.current.classList.toggle('is-closed')\n        if(navContRef.current)\n            navContRef.current.classList.toggle('is-closed')\n\n    };\n\n    const toggleOpenSelectConnectWithVertex = () => {\n        if(openSelectConnectWithVertex)\n            setOpenSelectConnectWithVertex(false)\n        else\n            setOpenSelectConnectWithVertex(true)\n    }\n\n    const handleChangeSelectConnectWithVertex = (e: any) => {\n        setSelectConnectWithVertexIndex(e.target.value)\n    }\n\n    const handleConnectVertex = () => {\n        if(selectedVertex) {\n            selectedVertex.connect(\n                vertices[Number(selectConnectWithVertexIndex)],\n                connectEdgeCost\n            )\n        }\n    }\n\n    const handleShowCostSwitch = (e: any) => {\n        setShowCost(!showCost)\n        Edge.showCost = !Edge.showCost\n    }\n\n    const handleChangeVertexColor = (e: any) => {\n        const { value } = e.target\n\n        Vertex.borderColorSelected = value\n        setVertexColor(value)\n    }\n\n    const handleChangeSlider = (e: any) => {\n        const value = Number(e.target.value)\n        setStepMili(value)\n        Vertex.stepMili = value\n    }\n\n    useEffect(() => {\n        let idx = -1\n        if(selectedVertex)\n            idx = vertices.indexOf(selectedVertex)\n        if(idx !== -1)\n            setSelectedVertexIndex(idx)\n\n    }, [selectedVertex, vertices])\n\n    return (\n        <Container ref={navRef}>\n            <MenuContainer ref={navContRef}>\n                <div className={classes.root}>\n                    <Typography fontSize=\"22px\">\n                        Settings\n                    </Typography>\n                </div>\n                <Accordion>\n                    <AccordionSummary expandIcon={<ExpandMore />}>\n                        <DeviceHub />\n                        <Typography>Vertex Connections</Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Typography>Create New</Typography>\n                        <div style={{ display: 'flex' }}>\n                            <InputLabel id=\"select-connect-with-label\">Connect with</InputLabel>\n                            <Select\n                                labelId=\"select-connect-with-label\"\n                                id=\"select-connect-with-vertex\"\n                                name=\"select-connect-with-vertex\"\n                                open={openSelectConnectWithVertex}\n                                onOpen={toggleOpenSelectConnectWithVertex}\n                                onClose={toggleOpenSelectConnectWithVertex}\n                                value={selectConnectWithVertexIndex}\n                                onChange={handleChangeSelectConnectWithVertex}>\n                                { getNotConnectedVertices().map(vertex => (\n                                    <MenuItem value={vertices.indexOf(vertex)} key={vertex.value}>{vertex.value}</MenuItem>\n                                ))}\n                            </Select>\n                            <TextField id=\"edge-cost\" label=\"cost\" size=\"small\"\n                                value={connectEdgeCost}\n                                onChange={e => setConnectEdgeCost(Number(e.target.value))}/>\n                        </div>\n                        <Button color=\"primary\" variant=\"contained\" onClick={handleConnectVertex}>Connect</Button>\n                        <Typography>Current Connections</Typography>\n                        <List>\n                            { vertices[selectVertexIndex] && vertices[selectVertexIndex].adjacents.map(edge => (\n                                <ListItem key={String(edge.source.value) + String(edge.destination.value)} style={{ padding: '0 8px'}} >\n                                    <ListItemText primary={<EdgeListItem edge={edge} forceRender={forceRender} />} />\n                                </ListItem>\n                            ))}\n                        </List>\n                    </AccordionDetails>\n                </Accordion>\n                <Accordion>\n                    <AccordionSummary expandIcon={<ExpandMore />}>\n                        <Code />\n                        <Typography>Algorithms</Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Typography>Here we go</Typography>\n                        <Button onClick={async () => {\n                            if(selectedVertex)\n                                console.log(await depthFirstSearch(selectedVertex, ''))\n                        }}>Depth First Search</Button>\n                        <Button onClick={async () => {\n                            if(selectedVertex)\n                                console.log(await breadthFirstSearch(selectedVertex, '10'))\n                        }}>Breadth First Search</Button>\n                        <Button onClick={async () => {\n                            if(selectedVertex)\n                                console.log(await bestFirstSearch(selectedVertex, 'Bucharest'))\n                        }}>Best First Search</Button>\n                        <Button onClick={e => restoreGraph(vertices)}>Restore</Button>\n                        <Button onClick={deleteGraph}>Delete Graph</Button>\n                    </AccordionDetails>\n                </Accordion>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={showCost}\n                            onChange={handleShowCostSwitch}\n                            name=\"showCost\"\n                            color=\"secondary\"/>\n                    }\n                    label=\"Show cost\"\n                />\n                <Slider\n                    defaultValue={300}\n                    valueLabelDisplay=\"auto\"\n                    step={50}\n                    max={1000}\n                    marks\n                    onChange={handleChangeSlider}\n                    value={stepMili}\n                />\n                <Button onClick={e => randomCosts()} >Random Costs</Button>\n                <Typography>Node</Typography>\n                <input type=\"color\" value={vertexColor} name=\"vertex-color\" onChange={handleChangeVertexColor} /> Color\n            </MenuContainer>\n            <ButtonContainer ref={buttonRef}>\n                <IconButton color=\"secondary\" onClick={toggleMenu}>\n                    { open ? <Close fontSize=\"large\" /> : <Menu fontSize=\"large\" /> }\n                </IconButton>\n            </ButtonContainer>\n        </Container>\n    )\n}\n\nexport default Sidebar\n","import Vertex from '../drawables/Vertex'\n\nexport default function restoreGraph(vertices: Vertex[]) {\n    vertices.forEach(vertex => {\n        vertex.restore()\n        vertex.adjacents.forEach(edge => edge.restore())\n    })\n}\n","import styled from 'styled-components'\n\nexport const Container = styled.main`\n    display: flex;\n    flex: 1;\n    position: relative;\n\n    overflow: hidden;\n`","import React from 'react';\nimport { SnackbarProvider } from 'notistack'\n\nimport Canvas from '../../components/Canvas'\nimport Sidebar from '../../components/Sidebar'\n\nimport { Container } from './styles'\nimport { VerticesProvider } from '../../contexts/vertices'\nimport { CanvasProvider } from '../../contexts/canvas'\n\nconst Main: React.FC = () => {\n  return (\n    <Container>\n        <SnackbarProvider maxSnack={3}>\n            <VerticesProvider>\n                <CanvasProvider>\n                    <Sidebar />\n                    <Canvas />\n                </CanvasProvider>\n            </VerticesProvider>\n        </SnackbarProvider>\n    </Container>\n  );\n}\n\nexport default Main\n","import React from 'react';\n\nimport Main from './pages/Main'\n\nconst App: React.FC = () => {\n  return (\n    <Main />\n  );\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}